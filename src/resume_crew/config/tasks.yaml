analyze_job_task:
  description: >
    Analyze the {job_url} description and score the candidate's fit based on their resume at {resume_path}.

    If the job URL is inaccessible, search for similar job descriptions or use the company name to find typical
    requirements for similar roles in that company. If all else fails, create a realistic job profile based on
    industry standards.

    Output structured JSON data.

    1. Extract Requirements:
       - Technical skills (required vs nice-to-have)
       - Soft skills
       - Experience levels
       - Education requirements
       - Industry knowledge

    2. Score Technical Skills (35%):
       - Match Level (0-1)
       - Years Experience
       - Context Score
       - Weighted average

    3. Score Soft Skills (20%):
       - Identify from resume
       - Compare to requirements
       - Assess context

    4. Score Experience (25%):
       - Years of relevant experience
       - Role similarity
       - Industry relevance
       - Project complexity

    5. Score Education (10%):
       - Degree match
       - Field relevance
       - Certifications

    6. Score Industry Knowledge (10%):
       - Industry experience
       - Domain expertise
       - Achievements

    7. Calculate Overall Score:
       - Weighted average
       - List strengths and gaps
       - Explain scoring

    IMPORTANT: Format your output as valid JSON wrapped in a code block with triple backticks. Do not include any additional text before or after the JSON. Follow the schema defined in the JobRequirements model.

  expected_output: >
    Structured JSON data per JobRequirements model schema. Ensure your output is valid JSON.
  agent: job_analyzer

optimize_resume_task:
  description: >
    Review the resume at {resume_path} against the job analysis and create optimization suggestions.
    If the job analysis is incomplete or unavailable, use the resume to identify areas for general improvement.
    Output structured JSON data.

    1. Content Analysis:
       - Compare with job requirements
       - Identify missing keywords/skills
       - Analyze achievements
       - Check ATS compatibility

    2. Structure Review:
       - Evaluate section organization
       - Check formatting
       - Assess hierarchy
       - Verify contact details

    3. Generate Suggestions:
       - Content improvements (before/after)
       - Skills to highlight
       - Achievements to add/modify
       - ATS recommendations
       
    IMPORTANT: Format your output as valid JSON wrapped in a code block with triple backticks. Do not include any additional text before or after the JSON. Follow the schema defined in the ResumeOptimization model.

  expected_output: >
    Structured JSON data per ResumeOptimization model schema. Ensure your output is valid JSON.
  agent: resume_analyzer
  context: [analyze_job_task]

research_company_task:
  description: >
    Research {company_name} for 2025 and prepare a comprehensive analysis.
    Output structured JSON data.

    1. Company Overview:
       - Recent developments
       - Culture and values
       - Market position
       - Growth trajectory

    2. Interview Preparation:
       - Common questions
       - Company-specific topics
       - Recent projects
       - Challenges/opportunities
       
    IMPORTANT: Format your output as valid JSON wrapped in a code block with triple backticks. Do not include any additional text before or after the JSON. Follow the schema defined in the CompanyResearch model.

  expected_output: >
    Structured JSON data per CompanyResearch model schema. Ensure your output is valid JSON.
  agent: company_researcher
  context: [analyze_job_task, optimize_resume_task]

generate_resume_task:
  description: >
    Using optimization suggestions and job analysis, create a polished markdown resume from {resume_path}.
    Avoid markdown code blocks (```).

    1. Content Integration:
       - Apply optimization suggestions
       - Add keywords/skills
       - Enhance achievements
       - Ensure ATS compatibility

    2. Formatting:
       - Use markdown headers (#, ##, ###)
       - Consistent styling
       - Clear hierarchy
       - Effective bullet points

    3. Documentation:
       - Track changes
       - Note preserved elements
       - Explain optimizations

  expected_output: >
    An ATS-friendly markdown resume incorporating all optimizations, with documented changes.
  agent: resume_writer
  context: [optimize_resume_task, analyze_job_task, research_company_task]

generate_report_task:
  description: >
    Create an executive summary report from previous steps' data.
    Format in markdown without code blocks (```).

    1. Data Integration:
       - Job analysis scores
       - Resume optimization details
       - Company research
       - Resume changes

    2. Report Sections:
       ## Executive Summary
       - Match score, quick wins
       - Strengths, improvement areas
       - Action items

       ## Job Fit Analysis
       - Score breakdown
       - Skills assessment
       - Experience alignment

       ## Optimization Overview
       - Resume improvements
       - ATS results
       - Impact metrics

       ## Company Insights
       - Culture fit
       - Interview tips
       - Talking points

       ## Next Steps
       - Action items
       - Skill development
       - Application strategy

    3. Formatting:
       - Markdown headers
       - Emojis for clarity
       - Tables where appropriate
       - Bullet points

  expected_output: >
    A comprehensive markdown report with actionable insights.
  agent: report_generator
  context: [analyze_job_task, optimize_resume_task, research_company_task]

generate_cover_letter_task:
  description: >
    Generate a professional, concise, and fully personalized cover letter for the job opportunity at {company_name}, 
    using the resume located at {resume_path} and the provided job description.
    Format the output in markdown, without any code blocks (```) or extra formatting.

    The cover letter must:
    - Be tailored specifically to the job offer and the company's sector
    - Reflect real-world application standards
    - Follow the formal structure of a traditional cover letter
    - Be written in fluent, professional English
    - Avoid unnecessary metadata or artificial scores (e.g., "Personalization Score")

    Required Structure (Modeled After a Real-World Example):
    
    1. First and Last Name  
    2. Address  
    3. Email and Phone Number  

    4. Contact at the Company (if available)  
    5. Company Name  
    6. Company Address  

    7. Written in [City], on [Date]  

    8. Subject: Application for the position of [Job Title] – [Reference Number]  

    9. Dear Sir or Madam,  

    10. [Opening paragraph: Mention your interest in the position and the company’s sector.  
    Show enthusiasm and clear motivation to join.]  

    11. [Second paragraph: Reference your professional experience and education.  
    Emphasize relevant skills acquired and specific experiences that align with the job offer.]  

    12. [Third paragraph: Demonstrate interest in the company and how joining aligns with your career goals.  
    Mention personal traits such as adaptability and motivation.]  

    13. [Closing paragraph: Express desire for an interview and thank the recruiter.  
    Maintain a polite and professional tone.]  

    14. Yours sincerely,  
    [First and Last Name]

    Guidelines:
    - Tone: Professional and formal
    - Style: Clear, concise, and fluent
    - Length: ~300–400 words (one page max)
    - Avoid bullet points, scoring metrics, repetition, and generic phrases
    - Ensure the content is naturally readable by a recruiter

  expected_output: >
    Valid JSON containing fields:
      - name
      - address
      - email
      - phone
      - company_contact
      - company_name
      - company_address
      - date
      - subject
      - opening_paragraph
      - experience_paragraphs
      - company_alignment_paragraph
      - closing_paragraph
    Output must be valid JSON, no extra text or code blocks.


  agent: cover_letter_writer
  context: [analyze_job_task, optimize_resume_task, research_company_task]
